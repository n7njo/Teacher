-- Update Lesson 2: Fix command examples and make them clear
UPDATE lessons SET content = jsonb_set(content, '{html}', '"<h1>Building Your First Hive-Mind: A Complete Walkthrough</h1><p>In this lesson, we\u0027ll walk through creating your first Claude Flow hive-mind from start to finish. Unlike the quick task-oriented swarms we discussed in Lesson 1, hive-minds are persistent, intelligent multi-agent systems that can work on complex projects over extended periods. Think of a hive-mind as assembling a permanent development team where each AI agent has specialized skills and they all share collective memory and coordination.</p><p>We\u0027ll build a complete task management application using the hive-mind wizard, demonstrating how multiple AI agents collaborate on different aspects of the project while maintaining context and learning from each interaction. This practical example will show you not just how to use the commands, but why hive-minds are powerful for complex development work.</p><h2>üèóÔ∏è Project Overview: TaskFlow Application</h2><p>Throughout this lesson, we\u0027ll be building \"TaskFlow\" - a modern task management application with the following features:</p><ul><li><strong>Frontend</strong>: React application with modern UI components and real-time updates</li><li><strong>Backend</strong>: Node.js REST API with Express, authentication, and database integration</li><li><strong>Database</strong>: PostgreSQL with proper schema design and migrations</li><li><strong>Features</strong>: User authentication, task CRUD operations, team collaboration, and dashboard analytics</li><li><strong>Deployment</strong>: Docker containerization and deployment configuration</li></ul><p>This is exactly the type of multi-faceted project where a hive-mind excels. Rather than trying to tackle everything yourself or in a single swarm, we\u0027ll coordinate specialized agents who can work on different aspects simultaneously while maintaining project coherence.</p><h2>üßô Starting the Hive-Mind Wizard</h2><p>The hive-mind wizard is Claude Flow\u0027s interactive setup system that guides you through creating a sophisticated multi-agent environment. Unlike simple swarm commands, the wizard helps you design the optimal agent configuration for your specific project needs.</p><h3>Launching the Wizard</h3><p>Open your terminal and run:</p><pre><code>npx claude-flow@alpha hive-mind wizard</code></pre><p>When you run this command, you\u0027ll enter an interactive session that asks you a series of questions to understand your project requirements. The wizard uses your responses to automatically configure the optimal agent types, coordination strategies, and memory structures for your specific use case.</p><h3>Wizard Configuration Steps</h3><p>The wizard will guide you through several key configuration decisions. Here\u0027s what to expect and how to answer for our TaskFlow project:</p><h4>Step 1: Project Description</h4><p><strong>Question:</strong> \"Describe your project or what you want to build\"</p><p><strong>Our Answer:</strong> \"Build a full-stack task management application called TaskFlow with React frontend, Node.js backend, PostgreSQL database, user authentication, real-time collaboration features, and Docker deployment\"</p><p>This initial description is crucial because the wizard uses natural language processing to understand the scope and complexity of your project. A detailed description helps it recommend the right number and types of agents.</p><h4>Step 2: Agent Configuration</h4><p><strong>Question:</strong> \"How many agents would you like? (recommended: 5-8 for complex projects)\"</p><p><strong>Our Answer:</strong> \"6 agents\"</p><p>For TaskFlow, six agents provides the right balance. The wizard will typically suggest:</p><ul><li><strong>1 Coordinator</strong>: Manages overall project flow and agent coordination</li><li><strong>1 Architect</strong>: Designs system architecture and database schema</li><li><strong>2 Coders</strong>: One for frontend (React), one for backend (Node.js)</li><li><strong>1 Tester</strong>: Creates comprehensive test suites and quality assurance</li><li><strong>1 DevOps</strong>: Handles deployment, Docker, and infrastructure</li></ul><h4>Step 3: Coordination Strategy</h4><p><strong>Question:</strong> \"Select coordination strategy: hierarchical, mesh, or hybrid\"</p><p><strong>Our Answer:</strong> \"hierarchical\"</p><p>For complex development projects like TaskFlow, hierarchical coordination works best. The coordinator agent acts as a project manager, delegating tasks to specialized agents and ensuring all work aligns with the overall project goals. This prevents conflicts and ensures coherent architecture decisions.</p><h4>Step 4: Memory and Persistence</h4><p><strong>Question:</strong> \"Enable persistent memory and cross-session learning?\"</p><p><strong>Our Answer:</strong> \"Yes\"</p><p>This is essential for hive-minds. Unlike swarms that forget everything when they complete, hive-minds maintain detailed memory of decisions made, code patterns used, and lessons learned. This means if you need to resume work later or add new features, the agents remember the entire context of your project.</p><h4>Step 5: Integration Options</h4><p><strong>Question:</strong> \"Enable GitHub integration for workflow automation?\"</p><p><strong>Our Answer:</strong> \"Yes\"</p><p>GitHub integration allows your hive-mind to automatically create repositories, manage branches, handle pull requests, and coordinate releases. For a real project like TaskFlow, this automation saves significant time.</p><h2>üêù Hive-Mind Initialization and Agent Spawning</h2><p>After completing the wizard, Claude Flow initializes your hive-mind with the configured agents. You\u0027ll see output similar to this:</p><pre><code>üß† Hive-Mind \"TaskFlow Development\" initialized successfully!\\nüìä Session ID: hive-taskflow-20250915-1\\nüëë Coordinator Agent spawned: coord-001\\nüèóÔ∏è Architect Agent spawned: arch-002\\nüíª Frontend Coder spawned: front-003\\nüíª Backend Coder spawned: back-004\\nüß™ Tester Agent spawned: test-005\\nüöÄ DevOps Agent spawned: ops-006\\n\\nüéØ Hive-Mind ready for task coordination\\nüìù Memory namespace: taskflow-dev\\nüîó Session persistence: enabled</code></pre><p>Each agent is now active and ready to collaborate. The session ID is important - you\u0027ll use this to resume work later. The memory namespace ensures all agents share context about your TaskFlow project specifically.</p><h2>üí¨ Communicating with Your Hive-Mind</h2><p>Once your hive-mind is initialized, you communicate with it using natural language commands. The coordinator agent receives your requests and intelligently delegates work to the appropriate specialized agents.</p><h3>Starting Development: Architecture Phase</h3><p>Let\u0027s begin by asking the hive-mind to design our application architecture. In your terminal, run:</p><pre><code>npx claude-flow@alpha hive-mind task \"Design the overall architecture for TaskFlow including database schema, API endpoints, React component structure, and deployment strategy\"</code></pre><p>When you send this request, here\u0027s what happens behind the scenes:</p><ol><li><strong>Coordinator Analysis</strong>: The coordinator agent analyzes your request and identifies that this is primarily an architecture task</li><li><strong>Agent Assignment</strong>: It assigns the architect agent as the primary worker, with input from other agents</li><li><strong>Collaborative Planning</strong>: The architect works with the frontend and backend coders to ensure the design is implementable</li><li><strong>Memory Storage</strong>: All architectural decisions are stored in the shared memory for future reference</li></ol><p>The hive-mind will respond with a comprehensive architecture document, including database schema, API design, React component hierarchy, and deployment architecture. This becomes the foundation for all subsequent development work.</p><h3>Implementation Phase: Coordinated Development</h3><p>With architecture established, we can start implementation. Here\u0027s how to request coordinated development work:</p><pre><code>npx claude-flow@alpha hive-mind task \"Implement the TaskFlow backend API with user authentication, task CRUD operations, and real-time updates using the architecture we designed\"</code></pre><p>The coordinator will assign this primarily to the backend coder, but notice how the hive-mind maintains context. The phrase \"using the architecture we designed\" references the previous work stored in memory. The backend agent automatically has access to all the architectural decisions, database schema, and API specifications created earlier.</p><p>Similarly, for frontend development:</p><pre><code>npx claude-flow@alpha hive-mind task \"Build the React frontend for TaskFlow with modern UI components, responsive design, and integration with our backend API\"</code></pre><p>The frontend coder receives this task with full context of the backend API design, ensuring perfect integration between frontend and backend without manual coordination on your part.</p><h3>Quality Assurance Integration</h3><p>Throughout development, you can request testing and quality assurance:</p><pre><code>npx claude-flow@alpha hive-mind task \"Create comprehensive test suites for both frontend and backend, including unit tests, integration tests, and end-to-end testing scenarios\"</code></pre><p>The tester agent has been following all the development work through shared memory. It knows exactly what features have been implemented, what the API endpoints are, and how the frontend components work. This allows it to create highly relevant and comprehensive tests without requiring you to explain the entire application structure.</p><h2>üìä Monitoring Hive-Mind Progress</h2><p>Unlike swarms that complete and disappear, hive-minds provide ongoing status monitoring. You can check progress at any time:</p><pre><code>npx claude-flow@alpha hive-mind status</code></pre><p>This shows you which agents are currently active, what tasks they\u0027re working on, and the overall progress of your project. For our TaskFlow example, you might see:</p><pre><code>üß† Hive-Mind Status: TaskFlow Development\\nüìä Session: hive-taskflow-20250915-1\\n‚è∞ Active for: 2h 34m\\n\\nüëë Coordinator (coord-001): Managing project flow\\nüèóÔ∏è Architect (arch-002): ‚úÖ Architecture complete\\nüíª Frontend Coder (front-003): üîÑ Building React components\\nüíª Backend Coder (back-004): üîÑ Implementing authentication\\nüß™ Tester (test-005): ‚è≥ Waiting for implementation\\nüöÄ DevOps (ops-006): ‚è≥ Preparing deployment config\\n\\nüìà Overall Progress: 45% complete\\nüß† Memory Usage: 156 entries stored\\nüîÑ Active Tasks: 2 in progress, 3 pending</code></pre><h2>üíæ Leveraging Persistent Memory</h2><p>One of the most powerful features of hive-minds is their persistent memory system. As your agents work, they automatically store important information that can be referenced later. You can also explicitly store and retrieve information:</p><h3>Storing Project Knowledge</h3><p>Run these commands in your terminal to store important project decisions:</p><pre><code># Store important project decisions\\nnpx claude-flow@alpha memory store \"design-patterns\" \"Using Redux for state management, Express middleware for authentication, and PostgreSQL with Prisma ORM\"\\n\\n# Store technical requirements\\nnpx claude-flow@alpha memory store \"tech-stack\" \"React 18, Node.js 18, PostgreSQL 14, Docker, JWT authentication, Socket.io for real-time features\"</code></pre><h3>Querying Stored Knowledge</h3><p>Later in development, agents (or you) can query this stored knowledge:</p><pre><code># Query specific technical information\\nnpx claude-flow@alpha memory query \"authentication\" --namespace taskflow-dev\\n\\n# Get recent project decisions\\nnpx claude-flow@alpha memory query --recent --limit 5</code></pre><p>This memory system ensures that all agents maintain consistent understanding of your project requirements, even across multiple work sessions.</p><h2>üîÑ Session Management and Resuming Work</h2><p>Real projects take time, and you often need to pause and resume work. Hive-minds excel at this through session management.</p><h3>Pausing Your Hive-Mind</h3><p>When you need to stop working, pause your session:</p><pre><code>npx claude-flow@alpha hive-mind pause</code></pre><p>This saves the current state of all agents, their work progress, and memory context. You can safely shut down your computer and return to work later.</p><h3>Resuming Previous Work</h3><p>When you\u0027re ready to continue, use these commands:</p><pre><code># List available sessions\\nnpx claude-flow@alpha hive-mind sessions\\n\\n# Resume specific session\\nnpx claude-flow@alpha hive-mind resume hive-taskflow-20250915-1</code></pre><p>When you resume, all agents return with full context of previous work. They remember where they left off, what decisions were made, and can immediately continue development without requiring you to re-explain the project.</p><h2>üöÄ Advanced Hive-Mind Coordination</h2><p>As your project progresses, you can request increasingly sophisticated coordination between agents:</p><h3>Cross-Agent Collaboration</h3><p>Request coordinated work across multiple agents:</p><pre><code>npx claude-flow@alpha hive-mind task \"Frontend and Backend teams coordinate to implement real-time task updates using WebSockets, while DevOps sets up the deployment pipeline and Tester creates integration tests\"</code></pre><p>The coordinator automatically breaks this complex request into sub-tasks, assigns them to appropriate agents, and manages the dependencies. The frontend coder and backend coder collaborate on the WebSocket implementation, while the DevOps agent works in parallel on deployment, and the tester prepares integration tests that will work with the new real-time features.</p><h3>Quality Gates and Review Cycles</h3><p>Request quality review and iteration:</p><pre><code>npx claude-flow@alpha hive-mind task \"Conduct comprehensive code review of all TaskFlow components, identify areas for improvement, and implement optimizations\"</code></pre><p>This triggers a review cycle where agents examine each other\u0027s work, provide feedback, and collaboratively improve the overall quality of the application.</p><h2>üìà Understanding Hive-Mind Benefits</h2><p>Through our TaskFlow example, you\u0027ve seen several key advantages of hive-minds over simple swarms:</p><p><strong>Persistent Context</strong>: Unlike swarms that start fresh each time, hive-minds maintain deep project knowledge across all work sessions. Your agents remember architectural decisions, coding patterns, and project requirements.</p><p><strong>Specialized Expertise</strong>: Each agent develops expertise in their domain while understanding how their work fits into the larger project. The frontend coder becomes deeply familiar with your specific React patterns, while the backend coder understands your particular API design philosophy.</p><p><strong>Coordinated Complexity</strong>: Complex projects require coordination across multiple technical domains. Hive-minds excel at managing these dependencies automatically, ensuring that database changes trigger necessary API updates, which in turn prompt frontend modifications and test updates.</p><p><strong>Learning and Improvement</strong>: As the hive-mind works on your project, it learns your preferences, coding styles, and decision patterns. This means later requests produce results that are increasingly aligned with your specific requirements and project vision.</p><h2>üéØ Best Practices for Hive-Mind Success</h2><p>Based on our TaskFlow development experience, here are key practices for effective hive-mind usage:</p><p><strong>Start with Clear Vision</strong>: Provide detailed project descriptions during wizard setup. The more context you give initially, the better the agents understand your goals and can make aligned decisions throughout development.</p><p><strong>Use Natural Language Effectively</strong>: When sending tasks to your hive-mind, be specific about requirements but trust the agents to determine implementation details. Instead of \"write a React component\", say \"create a task card component that displays task title, description, due date, and assignment status with edit and delete actions\".</p><p><strong>Leverage Memory Actively</strong>: Explicitly store important project decisions, coding standards, and architectural choices in memory. This ensures consistency as your project grows and evolves.</p><p><strong>Monitor and Guide</strong>: Regularly check hive-mind status and provide guidance when agents need direction. The coordinator is intelligent, but your domain expertise and project vision provide essential guidance for optimal results.</p><p><strong>Iterate and Refine</strong>: Don\u0027t expect perfection on the first pass. Use the hive-mind\u0027s ability to review and refine work iteratively. Request improvements, optimizations, and enhancements as your understanding of the project evolves.</p><h2>üèÅ Completing the TaskFlow Project</h2><p>As our TaskFlow project nears completion, you can request final coordination and deployment preparation:</p><pre><code>npx claude-flow@alpha hive-mind task \"Finalize TaskFlow application with comprehensive testing, performance optimization, deployment documentation, and production deployment setup\"</code></pre><p>The hive-mind coordinates all agents for final integration, testing, optimization, and deployment preparation. The DevOps agent ensures smooth deployment, the tester validates all functionality, and the coordinator provides comprehensive project documentation.</p><h2>üéâ Conclusion: Mastering Hive-Mind Development</h2><p>Through building TaskFlow, you\u0027ve experienced the full power of Claude Flow hive-minds. You\u0027ve seen how the wizard simplifies complex agent setup, how persistent memory maintains project context, and how intelligent coordination enables sophisticated multi-agent collaboration.</p><p>Hive-minds represent a fundamental shift in how complex software projects can be approached. Instead of managing all technical domains yourself, you orchestrate a team of specialized AI agents who collaborate intelligently while you focus on high-level project vision and requirements.</p><p>In our next lesson, we\u0027ll explore Claude Flow\u0027s extensive command ecosystem, showing you the shortcuts and advanced features that make day-to-day development with AI agents even more efficient and powerful.</p><p><strong>Ready to build your own complex project with a hive-mind?</strong> Start with <code>npx claude-flow@alpha hive-mind wizard</code> in your terminal and experience the future of collaborative AI development!</p>"')
WHERE id = 'c3d4e5f6-a748-4912-cdef-345678901235';